(*
s k k が恒等関数として働く理由を s k k 1 が評価される計算ステップを示すことで，説明せよ．
また，fun x y -> y と同様に働く関数を，コンビネータ s と k を関数適用のみで
 (fun や let による関数定義を使わずに) 組み合わせた形で表現せよ．
# ( (* s, k を 関数適用で組み合わせた式 *) ) 1 2;;
- : int = 2
*)

let k x y = x;;
let s x y z = x z (y z);;

(*
s k k が恒等関数として働く理由を s k k 1 が評価される計算ステップを示すことで，説明せよ．

s k k 1 ->
(s k k 1) ->
(k 1 (k 1)) ->
1
*)

(*
fun x y -> y と同様に働く関数: k (s k k)
*)

(k (s k k)) 1 2;;

(*
for unit test
*)
let ret_y x y = k (s k k) x y;;
